@page "/todo"

@using TodoList.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<DatabaseContext> ContextFactory
@inject NavigationManager Navigation

<PageTitle>Todo</PageTitle>

<h1>Todo</h1>

<div class="input-group my-3">
  <input type="text" class="form-control" placeholder="New Todo" aria-label="New Todo" aria-describedby="basic-addon2" @bind="newTodo">
  <div class="input-group-append">
    <button class="btn btn-primary" type="button" @onclick="AddTodo">Add</button>
  </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Done</th>
            <th>Title</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var todo in todos)
        {
            <tr>
                <td>
                    <input class="form-check-input" checked="@todo.IsDone" type="checkbox" @onchange="@(e => ToggleDone(todo, e))" />
                </td>
                <td>
                    <span class="@((todo.IsDone)? "text-decoration-line-through" : "done")">
                        @todo.Title
                    </span>
                </td>
                <td>
                    <button class="btn btn-secondary" @onclick="Edit">Edit</button>
                </td>
            </tr>
        }
    </tbody>
</table>

Undone: @todos.Count(todo => !todo.IsDone)

@code {
    private List<Models.Todo> todos = new();
    private string? newTodo;

    protected override async Task OnInitializedAsync()
    {
        using(var ctx = ContextFactory.CreateDbContext())
        {
            todos = await ctx.Todos.ToListAsync();
        }
    }
    
    private void Edit()
    {
        Navigation.NavigateTo("/");
    }

    private async Task ToggleDone(Models.Todo todo, ChangeEventArgs e)
    {
        todo.IsDone = Convert.ToBoolean(e.Value);
        using(var ctx = ContextFactory.CreateDbContext())
        {
            ctx.Todos.Update(todo);
            await ctx.SaveChangesAsync();

            foreach(var t in todos)
            {
                if (t.Id == todo.Id)
                {
                    t.IsDone = todo.IsDone;
                    break;
                }
            }
        }
    }

    private async Task AddTodo()
    {
        // FIXME: replace with better validation
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            using(var ctx = ContextFactory.CreateDbContext())
            {
                Models.Todo todo = new Models.Todo { Title = newTodo };
                ctx.Todos.Add(todo);
                await ctx.SaveChangesAsync();

                todos.Add(todo);
                newTodo = string.Empty;
            }
        }
    }
}
