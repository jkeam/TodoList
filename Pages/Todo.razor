@page "/todos/{id}"

@using TodoList.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<DatabaseContext> ContextFactory
@inject NavigationManager Navigation

<PageTitle>Todo</PageTitle>

<div class="mb-2">
	<a href="/todos">Back</a>
</div>

<h1>Todo @Id</h1>

@if (todo is not null && errorMessage is null)
{
	<EditForm Model="@todo" OnValidSubmit="@HandleValidSubmit">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="form-group">
			<label for="title">Title</label>
			<InputText @bind-Value="todo.Title" class="form-control" />
		</div>

		<button type="submit" class="btn btn-primary mt-3">Submit</button>
	</EditForm>
}
else
{
	<div>
		@errorMessage
	</div>
}

@code {
	[Parameter]
    public string? Id { get; set; }

	string? errorMessage = null;

	Models.Todo? todo = null;
	
	protected override async Task OnInitializedAsync()
    {
		if (Id is null) {
			errorMessage = "Unable to find Todo";
			return;
		}

        using(var ctx = ContextFactory.CreateDbContext())
        {
			try
			{
				int parsedId = Int32.Parse(Id);
				todo = await ctx.Todos.FindAsync(parsedId);
				if (todo is null)
				{
					errorMessage = "Unable to find Todo";
				}
			}
			catch (FormatException)
			{
				errorMessage = "Unable to find Todo";
				return;			
			}
        }
    }

	private async Task HandleValidSubmit()
    {
		if (todo is null)
		{
			return;
		}

        using(var ctx = ContextFactory.CreateDbContext())
        {
            ctx.Todos.Update(todo);
            await ctx.SaveChangesAsync();
		}
    }
}
